# Import necessary libraries
import pandas as pd

# Step 2: Read data from CSV into a DataFrame
orders = pd.read_csv('orders.csv')

# Task 1: Compute the total revenue generated by the online store for each month in the dataset
def compute_revenue_by_month(orders):
    # Convert the given string of date to date-time format and then creating a new column with only year and month
    orders['order_date'] = pd.to_datetime(orders['order_date'])
    orders['month'] = orders['order_date'].dt.to_period('M')

    # Grouping rows with same month values and aggregating the product of price and quantity to calculate monthly revenues
    return orders.groupby('month').apply(lambda var: (var['product_price'] * var['quantity']).sum())

# Task 2: Compute the total revenue generated by each product in the dataset
def compute_revenue_by_product(orders):
    # Grouping rows with same product name and aggregating the product of price and quantity to calculate per product revenues
    return orders.groupby('product_name').apply(lambda var: (var['product_price'] * var['quantity']).sum())

# Task 3: Compute the total revenue generated by each customer in the dataset
def compute_revenue_by_customer(orders):
    # Grouping rows with same customer_id and aggregating the product of price and quantity to calculate per customer revenues
    return orders.groupby('customer_id').apply(lambda var: (var['product_price'] * var['quantity']).sum())

# Task 4: Identify the top 10 customers by revenue generated
def identify_top_10_customers(orders):
    revenue_by_customer_val = orders.groupby('customer_id').apply(lambda var: (var['product_price'] * var['quantity']).sum())
    # Sorting per customer revenue in descending order and picking the top 10
    return revenue_by_customer_val.sort_values(ascending=False).head(10)
